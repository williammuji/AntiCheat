// 指定使用proto3语法。
syntax = "proto3";

// 定义包名，防止命名冲突。
package anti_cheat;

// 定义了所有可被检测到的作弊或可疑行为的类别。
// 通过此枚举，服务器可以轻松地对不同类型的作弊行为进行分类、统计和响应。
enum CheatCategory {
  // --- 默认与未知类别 ---
  RESERVED = 0; // proto3语法要求枚举的第一个值为0，此为保留值。
  UNKNOWN_CHEAT = 1; // 无法归类的未知作弊行为。

  // --- 游戏完整性类别 (1xx) ---
  INTEGRITY_UNKNOWN = 100;
  INTEGRITY_MODULE_TAMPERED = 101; // 核心模块（如kernel32.dll）在内存中的映像与磁盘上的文件不一致，可能被hook。
  INTEGRITY_MEMORY_PATCH = 102; // 检测到对关键游戏逻辑的内存补丁。
  INTEGRITY_ASSET_TAMPERED = 103; // 游戏资源文件（如模型、地图、数据文件）的哈希值与预期不符。
  INTEGRITY_API_HOOK = 104; // 检测到对关键API函数的挂钩。
  INTEGRITY_SUSPICIOUS_HANDLE = 105; // 检测到可疑进程持有本进程的句柄。
  INTEGRITY_BASELINE_LEARNED = 106; // 用于学习模块基线哈希
  INTEGRITY_SELF_TAMPERING = 107; // 反作弊模块自身被篡改

  // --- 外部环境与工具类别 (2xx) ---
  ENVIRONMENT_UNKNOWN = 200;
  ENVIRONMENT_DEBUGGER_DETECTED = 201; // 检测到调试器（如OllyDbg, x64dbg）正在附加游戏进程。
  ENVIRONMENT_HARMFUL_PROCESS = 202; // 检测到已知的作弊或逆向工具进程（如Cheat Engine）正在运行。
  ENVIRONMENT_VIRTUAL_MACHINE = 203; // 检测到游戏正在虚拟机（如VMware, VirtualBox）中运行。
  ENVIRONMENT_SUSPICIOUS_DRIVER = 204; // 检测到可疑的内核驱动程序，可能用于更底层的作弊。
  ENVIRONMENT_INVALID_PARENT_PROCESS = 205; // 检测到游戏由一个非法的父进程启动（例如，不是由官方启动器启动）。
  ENVIRONMENT_PROCESS_HARDENING_FAILED = 206; // 进程加固失败（例如，无法设置DEP策略）。
  ENVIRONMENT_SUSPICIOUS_LAUNCH = 207;  // 非法启动器
  ENVIRONMENT_HANDLE_PROXY_DETECTED = 208; // 新增：检测到句柄代理攻击
  ENVIRONMENT_UNEXPECTED_OVERLAY = 209; // 新增：检测到可疑的窗口覆盖

  // --- 运行时异常类别 (3xx) ---
  RUNTIME_UNKNOWN = 300;
  RUNTIME_THREAD_NEW_UNKNOWN = 301; // 在游戏运行时，检测到新的、未知的线程被创建，可能由注入的DLL创建。
  RUNTIME_MODULE_NEW_UNKNOWN = 302; // 检测到新的、未知的模块（DLL）被加载到游戏进程中。
  RUNTIME_MEMORY_EXEC_PRIVATE = 303; // 发现不属于任何模块的私有可执行内存区域，这是DLL注入或Shellcode的典型特征。
  RUNTIME_ILLEGAL_FUNCTION_CALL = 304; // 检测到对关键游戏函数的非法调用（例如，来自未知模块或Shellcode）。
  RUNTIME_ERROR = 399; // 反作弊系统内部发生非致命错误。

  // --- 输入与自动化类别 (4xx) ---
  INPUT_AUTOMATION_DETECTED = 401; // 检测到疑似鼠标或键盘宏、机器人等自动化行为。

  // --- 系统信息与状态类别 (5xx) ---
  SYSTEM_INITIALIZED = 500; // 反作弊系统初始化成功并建立基线。
  SYSTEM_FINGERPRINT = 501; // 用于收集硬件指纹，本身不是作弊，但可用于关联封禁。
}

// 描述客户端硬件和软件环境的唯一标识。
// 用于追踪和关联账户，即使玩家更换账号。
message HardwareFingerprint {
  string disk_serial = 1;         // C盘卷序列号。
  repeated string mac_addresses = 2; // 所有网络适配器的MAC地址。
  string computer_name = 3;       // 计算机名。
  string os_version = 4;          // 操作系统版本。
  string cpu_info = 5;            // CPU信息（如架构、核心数）。
}

// 描述一个被加载到游戏进程中的模块（例如 DLL）的详细信息。
message ModuleInfo {
  string name = 1;        // 模块名，例如 "kernel32.dll"。
  string path = 2;        // 模块在磁盘上的完整路径。
  uint64 base_address = 3; // 模块在内存中的基地址。
  uint32 size = 4;        // 模块在内存中的大小。
  string sha256_hash = 5; // 模块文件的SHA256哈希值，用于完整性校验。
}

// 描述一个在系统中运行的进程的信息。
message ProcessInfo {
  uint32 process_id = 1; // 进程ID (PID)。
  string name = 2;       // 进程可执行文件名，例如 "cheatengine.exe"。
  string path = 3;       // 进程可执行文件的完整路径。
  string command_line = 4; // 进程的命令行参数。
}

// 单条具体的作弊证据。
message Evidence {
  uint64 client_timestamp_ms = 1; // 客户端检测到该行为时的时间戳 (毫秒, UTC)。
  CheatCategory category = 2;     // 证据的类别，来自上方的CheatCategory枚举。
  string description = 3;         // 对可疑行为的详细文字描述，可以是调试信息或附加上下文。

  oneof details {
    ModuleInfo suspicious_module = 4; // 如果证据与模块相关，则填充此字段。
    ProcessInfo suspicious_process = 5; // 如果证据与外部进程相关，则填充此字段。
    string memory_region_info = 6;    // 如果是内存相关的证据，可以记录内存区域信息（如地址、大小、权限）。
  }
}

// 客户端发送给服务器的精简版反作弊报告。
// 每次上报只包含增量的证据，以减少网络开销。
// 玩家身份等信息由服务器在会话建立时进行关联。
message CheatReport {
  // --- 报告元数据 ---
  string report_id = 1; // 本次报告的唯一ID (建议使用 UUID)，用于追踪和去重。
  uint64 report_timestamp_ms = 2; // 本次报告生成时的时间戳 (毫秒, UTC)。

  // --- 证据列表 ---
  // 只包含本次上报周期内新发现的证据。
  repeated Evidence evidences = 3;

  // 硬件指纹信息。
  // 通常只在玩家第一次登录或硬件发生显著变化时上报一次。
  // 使用 optional 关键字表示它不是每次都必须存在。
  // 使用 optional 关键字表示它不是每次都必须存在。
  optional HardwareFingerprint fingerprint = 4;
}

// 客户端动态配置
// 由服务器下发，用于动态调整客户端的反作弊策略，而无需更新客户端。
message ClientConfig {
  // 扫描时间间隔 (单位: 秒)
  optional int32 base_scan_interval_seconds = 1;
  optional int32 heavy_scan_interval_minutes = 2;
  optional int32 report_upload_interval_minutes = 3;

  // 黑名单列表
  repeated string harmful_process_names = 4;
  repeated string harmful_keywords = 5;

  // 白名单列表
  repeated string whitelisted_veh_modules = 6;
  repeated string whitelisted_process_paths = 7;
  repeated string whitelisted_window_keywords = 8;
  repeated string known_good_processes = 9; // 新增：已知安全的进程白名单

  // --- 行为控制参数 ---
  optional int32 suspicious_handle_ttl_minutes = 20;
  optional int32 report_cooldown_minutes = 21;
  optional int32 illegal_call_report_cooldown_minutes = 22;
  optional int32 jitter_milliseconds = 23;

  // --- 容量与预算控制 ---
  optional int32 max_evidences_per_session = 30;
  optional int32 max_illegal_sources = 31;
  optional int32 light_scan_budget_ms = 32;
  optional int32 heavy_scan_budget_ms = 33;

  // --- 容量与缓存控制 ---
  optional int32 max_mouse_move_events = 40;
  optional int32 max_mouse_click_events = 41;
  optional int32 max_keyboard_events = 42;
  optional int32 process_cache_duration_minutes = 43;
  optional int32 signature_cache_duration_minutes = 44;

  // --- 输入自动化检测参数 ---
  optional int32 keyboard_macro_min_sequence_length = 50;
  optional int32 keyboard_macro_min_pattern_length = 51;
  optional double mouse_click_stddev_threshold = 52; // 鼠标点击间隔标准差阈值
  optional int32 mouse_move_collinear_threshold = 53; // 鼠标移动共线点阈值

  // --- 安全与性能阈值 ---
  optional int32 max_veh_handlers_to_scan = 60; // 单次扫描VEH处理器的最大数量
  optional int32 max_handles_to_scan = 61; // 单次扫描系统句柄的最大数量

  // 配置版本号或签名，用于校验
  optional string config_version = 100;
  optional bytes config_signature = 101; // 服务器用私钥对配置内容做的签名
}
